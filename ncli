#!/usr/bin/env python

'''
This script uses the JSON Nagios API to issue commands to Nagios. The
goal is to make your life easier. If it doesn't, please return it
unharmed and let me know what went wrong and I'll make it better.

Usage:
    ncli [base options] services|hosts [service match options] action [action options]

    Base Options:
    '-r', '--refresh'     Refreshes the cached nagios status file.
    '--raw'               Allows sending raw JSON directly to the server.
    ============================================================================
    Examples:
    ncli                Defaults to [ncli services show] - all services in compact view
    ncli services -p    Shows all problematic services
    ncli services -p -h staging-1
                        Matches problematic services with hostname containing staging-1
                        (NOTE: This will include staging-1-app2 etc)
    ncli services -h ^staging-1$ show -x
                        Matches all services with hostname matching exactly staging-1 with extended information
    ncli services -s "haproxy|memcached" disable-notifications
                        Disables notifications for all services with description containing haproxy or memcached
    ncli services -ph staging-15 -s unicorn ack --comment "fixing this"
                        Acknowledges all problematic services with host containing staging-15 and
                        description containing unicorn with provided comment and the default settings from config.yml
    ncli services -ph lb12 schedule
                        Schedules all services on lb12 to be rechecked immediately

    Actions:
        show (default)
        (ack)nowledge
        [enable|disable]-notifications
        schedule(-check)

        WIP
        [enable|disable]-event-handlers
        [enable|disable]-active-checks
        global [enable|disable]-notifications
        global [enable|disable]-event-handlers

Copyright 2011-2013 by Bump Technologies, Inc and other authors and
contributors. See the LICENSE file for full licensing information.
Update 2014 by mleung@lumoslabs.com

'''

import re
import requests
import sys
import yaml
from json import load, dump, loads, dumps
from ncli_utils import *
from optparse import OptionParser, OptionGroup
from os import path, remove
from time import time


STATE = None
CONFIG = None
URL = None  # To the Nagios API "http://foo:6315"

def main(argv):
    '''Where the fun begins. Actually do something useful.

    '''
    global CONFIG, STATE, URL

    config_path = "%s/config.yml" % path.dirname(path.realpath(__file__))
    with open(config_path) as yml:
        CONFIG = yaml.load(yml)
    URL = "http://%s:%d" % (CONFIG['global']['host'], CONFIG['global']['port'])

    # Parse out command line options
    p = OptionParser(usage=trim(__doc__))
    p.disable_interspersed_args()
    p.add_option('-r', '--rf', '--refresh', dest='rf', action='store_true', help='Refresh cached status file')
    p.add_option('--raw', dest='raw', action='store_true', help='Enable raw mode for the CLI')
    (opts, args) = p.parse_args(argv[1:])

    # If no more arguments, show usage
    if len(args) <= 0:
        args = ['services']

    # If we're in raw mode, bail out for that now
    if opts.raw:
        return do_raw(args)

    if opts.rf:
        invalidate_cache()

    if  path.isfile(cache_path()) and \
            time() < path.getmtime(cache_path()) + CONFIG['ncli']['refresh_cache']:
        with open(cache_path(), 'r') as cache:
            STATE = load(cache)
    else:
        print 'Fetching status file...'
        data = api(['state'])
        if isinstance(data, dict):
            if data['success']:
                with open(cache_path(), 'w') as cache:
                    STATE = data['content']
                    dump(STATE, cache)
                    print '-----------------------'
            else:
                return critical('Failed to load objects from nagios-api')
        else:
            return critical('Failed to load objects from nagios-api')

    #NAGIOS = api(['objects'])
    # args will now contain the subcommand, some positional arguments,
    # and then the dashed options. Split them.
    command, posargs, otherargs = args[0], [], []
    for arg in args[1:]:
        if len(otherargs) > 0:
            otherargs.append(arg)
            continue
        if arg[0] == '-':
            otherargs.append(arg)
        else:
            posargs.append(arg)

    # Dispatch table and then dispatch
    dispatch = {
        'services': match_services,
        'hosts': match_hosts,
    }
    for cmd in dispatch:
        if re.match(r'^' + command, cmd):
            return dispatch[cmd](posargs, otherargs)
    p.error('Command not found, see the usage')


def api(args):
    '''Send a call out to the API. Returns the response object (dict) or
    an integer exit code on failure.

    '''
    global URL

    # The rest of the data is now in args, build the URL
    verb = args[0]
    objid = args[1] if len(args) >= 2 and args[1].isdigit() else ''
    url = '%s/%s/%s' % (URL, verb, objid)

    # Now build the reqobj
    obj = {}
    for kv in args[2 if objid else 1:]:
        if not '=' in kv:
            return critical('Parameter "%s" does not conform to expected key=value format' % kv)
        key, value = kv.split('=', 1)
        obj[key] = value

    # Set the method to POST if we recognize the verb or if there is a payload
    method = 'POST' if len(obj) > 0 else 'GET'
    if verb in ('cancel_downtime'):
        method = 'POST'
    payload = dumps(obj) if method == 'POST' else None

    # Construct the request object to send it out
    try:
        if payload is None:
            res = requests.get(url)
        else:
            res = requests.post(url, data=payload,
                    headers={'Content-Type': 'application/json'})
    except (requests.ConnectionError, requests.Timeout):
        return critical('Failed connecting to nagios-api server')
    if res is None:
        return critical('Failed requesting resource')

    # Probably a JSON response, get it
    try:
        if (res.headers['content-encoding'] == "gzip"):
            resobj = loads(res.content)
        else:
            resobj = loads(res.text)
    except ValueError:
        return critical('Failed parsing server response')
    except TypeError:
        return critical('Failed parsing JSON in server response')
    return resobj


def match_hosts(args, opts):
    critical("This feature is currently unsupported. Sorry about that.")


def match_services(args, opts):
    '''TODO

    '''
    global STATE
    p = OptionParser(add_help_option=False)
    p.disable_interspersed_args()
    p.add_option('-h', '--host', dest='host', action='store',
            help='Only match services matching host regex.')
    p.add_option('-p', '--problem', dest='problem', action='store_true',
        help='Only match services that are in a non-OK state.')
    p.add_option('-s', '--service', dest='service', action='store',
        help='Only match services matching service regex.')
    p.set_defaults(host=".*",service=".*",problem=False)
    (options, args) = p.parse_args(opts)

    service_matches = []
    for (hostname, hostdata) in STATE.iteritems():
        for (svcname, svcdata) in hostdata['services'].iteritems():
            svc = Service(svcname, svcdata, hostname)
            if options.problem and svc.current_state == 'OK':
                continue
            if re.search(options.host, svc.host.lower()) is None:
                continue
            if re.search(options.service, svc.name.lower()) is None and re.search(options.service, svc.name) is None:
                continue
            service_matches.append(svc)

    if len(service_matches) < 1:
        return critical("Could not find a service matching the conditions host:/%s/, service:/%s/, problem:%s" % (options.host, options.service, options.problem))

    # args will now contain the subcommand, some positional arguments,
    # and then the dashed options. Split them.
    command = args[0] if len(args) > 0 else 'show'
    posargs, otherargs = [], []
    for arg in args[1:]:
        if len(otherargs) > 0:
            otherargs.append(arg)
            continue
        if arg[0] == '-':
            otherargs.append(arg)
        else:
            posargs.append(arg)

    # Dispatch table and then dispatch
    dispatch = {
        'show': action_show,
        'ack': action_acknowledge_services,
        'acknowledge': action_acknowledge_services,
        'notify': action_notifications_services,
        'notification': action_notifications_services,
        'notifications': action_notifications_services,
        'enable-notifications': action_enable_notifications_services,
        'disable-notifications': action_disable_notifications_services,
        'schedule': action_schedule_check_services,
        'schedule-check': action_schedule_check_services,
        'schedule-checks': action_schedule_check_services,
        'schedule-downtime': action_schedule_downtime,
        'downtime': action_schedule_downtime,
        'cancel-downtime': action_cancel_downtime
    }
    for cmd in dispatch:
        if re.match(r"^%s$" % command, cmd):
            return dispatch[cmd](otherargs, service_matches)
    p.error('Command not found, defaulting to "show". See the usage.')
    return action_show(otherargs, service_matches)


def action_show(opts, matches):
    '''Displays information for services. Usage:
        -x --extended      	Prints extended information for the services.

    '''
    p = OptionParser(usage=trim(action_show.__doc__))
    p.disable_interspersed_args()
    p.add_option('-x', '--extended', dest='extended', action='store_true',
        help="Prints extended information for the services.")
    (options, args) = p.parse_args(opts)

    if options.extended:
        [ obj.xp() for obj in matches ]
    else:
        [ obj.pp() for obj in matches ]
    return 0


def execute_action_services(services, action, shared_args=[]):
    for svc in services:
        post_args = shared_args[:]
        post_args += ["host=%s" % svc.host]
        post_args += ["service=%s" % svc.name]
        execute_action(action, post_args)


def execute_action(action, post_args):
    print "Executing \"%s\" with options=\"%s\"..." % (action, post_args)
    res = api([action] + post_args)
    if isinstance(res, int):
        return res
    if not isinstance(res, dict):
        return critical("API returned unknown object type")
    if not res["success"]:
        return critical("Failed: %s" % res['content'])


def action_schedule_check_services(opts, services):
    '''Schedules services to be checked again immediately. Usage:
        -t, --time=STR  Unsupported option. Defaults to current time.

    '''
    p = OptionParser(usage=trim(action_acknowledge_services.__doc__))
    p.disable_interspersed_args()
    #TODO
    p.add_option('-t', '--time', dest='time', action='store',
        help='Unsupported, defaults to current time.')
    (options, args) = p.parse_args(opts)

    action = 'schedule_check'
    execute_action_services(services, action)
    invalidate_cache()
    return 0


def action_acknowledge_services(opts, services):
    '''Acknowledge problem for a service. Usage:
        -c, --comment=TEXT   	Comment on the acknowledged problem.
        -s, --sticky=TRUE/FALSE  	[defaults to TRUE] If sticky, an acknowledgement hangs around
                                until a host reaches "OK" - otherwise, it goes away on next
                                state change.
        -n, --notify=TRUE/FALSE	[defaults to TRUE] If TRUE, sends notification that an
                                acknowledgement has occurred.
        -p, --persistent=TRUE/FALSE	[defaults to FALSE] If TRUE, the comment will remain after the
                                host returns to "OK" state.
        -a, --author=STR		[defaults to "nagios-api"] Who is doing the acknowledging.

    '''
    defaults = CONFIG['ncli']['commenting']
    p = OptionParser(usage=trim(action_acknowledge_services.__doc__))
    p.disable_interspersed_args()
    p.add_option('-c', '--comment', dest='comment', action='store',
        help='Comment on the acknowledged problem.')
    p.add_option('-s', '--sticky', dest='sticky', action='store_true',
        help='Does acknowledgement hang around until "OK" reached by host?')
    p.add_option('-n', '--notify', dest='notify', action='store_true',
        help='Should we send a notification of the acknowledgment?')
    p.add_option('-p', '--persistent', dest='persistent', action='store_true',
        help='Should the comment hang around after the problem expires?')
    p.add_option('-a', '--author', dest='author', action='store',
        help='Name appearing for who does the acknowledgment.')
    p.set_defaults(
            sticky=defaults['sticky'],
            notify=defaults['notify'],
            persistent=defaults['persistent'],
            author=defaults['author']
    )
    (options, args) = p.parse_args(opts)

    shared_args = []
    if options.comment:
        shared_args += ["comment=%s" % options.comment]
    else:
        return critical('Did not include comment when required!')

    shared_args += ["sticky=%s" % int(options.sticky)]
    shared_args += ["notify=%s" % int(options.notify)]
    shared_args += ["persistent=%s" % int(options.persistent)]
    shared_args += ['author=%s' % options.author]

    execute_action_services(services, 'acknowledge_problem', shared_args)
    invalidate_cache()
    return 0


def action_enable_notifications_services(opts, services):
    action_notifications_services(['--enable'], services)


def action_disable_notifications_services(opts, services):
    action_notifications_services(['--disable'], services)


def action_notifications_services(opts, services):
    '''Enable/disable notifications for a service.
        Available options:
        -d, --disable     Disables notifications
        -e, --enable      Enables notifications

    '''
    p = OptionParser(usage=trim(action_notifications_services.__doc__))
    p.disable_interspersed_args()
    p.add_option('-d', '--disable', dest='enable', action='store_false',
        help='Disable notifications for service')
    p.add_option('-e', '--enable', dest='enable', action='store_true',
        help='Enable notifications for service')
    p.set_defaults(enable=None)
    (options, args) = p.parse_args(opts)

    if options.enable is None:
        p.error("The notify action requires you to add either --disable or --enable.")

    action = 'enable_notifications' if options.enable else 'disable_notifications'
    execute_action_services(services, action)
    invalidate_cache()
    return 0


def action_schedule_downtime(opts, services):
    '''Create a fixed scheduled downtime for a service. Usage:
        -a, --author=NAME     Specify an author to record this downtime for.
            --cancel          Cancels downtime for the service.
        -c, --comment=TEXT    Leave descriptive text about the downtime.
        -d, --duration=STR    Specify how long to schedule downtime for. Specify a duration
        using a format of 2h / 5d / 10s / 60m
        -t, --time=STR        Specify when downtime should start. Unsupported.

    '''
    defaults = CONFIG['ncli']['commenting']
    p = OptionParser(usage=trim(action_schedule_downtime.__doc__))
    p.disable_interspersed_args()
    p.add_option('-a', '--author', dest='author', action='store',
        help='Author to blame for this downtime')
    p.add_option('--cancel', dest='cancel', action='store_true',
        help='Cancels scheduled downtime.')
    p.add_option('-c', '--comment', dest='comment', action='store',
        help='Explanatory comment to leave on the downtime')
    p.add_option('-d', '--duration', dest='duration', action='store',
        help='Duration of time to schedule downtime.')
    p.add_option('-t', '--time', dest='time', action='store',
        help='Unsupported, defaults to current time.')
    p.set_defaults(
            author=defaults['author'],
            cancel = False,
            comment=None,
            duration='1h',
            time=None
    )
    (options, args) = p.parse_args(opts)

    if options.cancel:
        return action_cancel_downtime(opts, services)

    duration_seconds = time_to_seconds(options.duration)
    if duration_seconds is None:
        p.error('Invalid duration, must be in a format like "2h"')

    shared_args = []
    shared_args += ['author=%s' % options.author]
    shared_args += ['comment=%s' % options.comment]
    shared_args += ['duration=%d' % duration_seconds]
    action = 'schedule_downtime'
    execute_action_services(services, action, shared_args)
    invalidate_cache()
    return 0


def action_cancel_downtime(opts, services):
    '''Cancel a scheduled downtime for a service.

    '''
    action = 'cancel_downtime'
    execute_action_services(services, action)
    invalidate_cache()
    return 0


def do_raw(args):
    '''Allows the user to interact with the API directly and use this
    CLI as a JSON generator. Please know what you're doing.

    '''
    resobj = api(args)
    if isinstance(resobj, int):
        return resobj
    if not isinstance(resobj, dict):
        return critical('API returned unknown object type')

    # Protocol failure check
    if not resobj['success']:
        return critical('Failure: %s' % resobj['content'])

    # These are simple responses, we can handle them here
    if type(resobj['content']) is str:
        print resobj['content']
    else:
        print dumps(resobj['content'])
    return 0


def critical(msg, retval=1):
    '''Print a message to STDERR and return a failure code.

    '''
    print >>sys.stderr, txtcolor.CRIT + msg + txtcolor.ENDC
    return retval


def cache_path():
    return "%s/cache.json" % path.dirname(path.realpath(__file__))


def invalidate_cache():
    try:
        remove(cache_path())
    except OSError:
        pass



if __name__ == '__main__':
    sys.exit(main(sys.argv[0:]))
